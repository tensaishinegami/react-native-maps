// 1. Create, update and deactivate students

    // Create students //

    class CreateTraineeRequest(JsonModel):
        first_name: str
        last_name: str
        email: Optional[EmailStr]
        username: Optional[str]
        password: Optional[str]
        organization_code: str


    @router.post(
        "/student",
        response_model=StudentResponse,
        summary="Create a new Student",
        description="Create a new Student under provided organization",
        response_description="New Student’s meta data",
        dependencies=[Depends(allow_edit_roles), Depends(verify_org_access)],
    )
    async def create_student(
        request: Request,
        response: Response,
        body: CreateTraineeRequest,
    ):
        try:
            user = await UserService.create_user(body)
            return user


    // Edit student //

    class EditTraineeRequest(JsonModel):
        first_name: str
        last_name: str
        email: Optional[EmailStr]
        username: Optional[str]

    @router.put(
        "/student/{student_id}",
        response_model=StudentResponse,
        summary="Edit a new Student",
        description="Edit a new Student under provided organization",
        response_description="Edited Student’s meta data",
        dependencies=[Depends(allow_edit_roles), Depends(verify_org_access)],
    )
    async def edit_student(
        request: Request,
        response: Response,
        body: EditTraineeRequest,
        student_id: str,
    ):
        try:
            user = await UserService.edit_student(body, student_id)
            return user



    // Delete student //
        class DeactivateStudentRequest(JsonModel):
            student_id: str

        @router.put(
            "student/deactivation",
            summary="Deactivate a student",
            description="Changes active status to inactive for provided User ID",
            response_description="empty 204 response",
            status_code=204,
            dependencies=[Depends(allow_edit_roles)],
        )
        async def student_deactivation(body: DeactivateUserRequest, request: Request):
        try:
            resp = await UserService.student_deactivation(body.student_id)
            return


// 2. Create, update and deactivate Classrooms

    // Create classroom

    class CreateClassroomRequest(JsonModel):
        organization_code: str
        product_id: int
        name: str

    @router.post(
        "/classroom",
        summary="Create Classroom",
        description="Create a classroom classroom by provided classroom data",
        response_description="Returns new Classroom's meta data",
        dependencies=[Depends(allow_edit_roles)],
    )
    async def create_classroom(request: Request, response: Response, body: CreateClassroomRequest):
        classroom = await ClassroomService.create_classroom(body)
        return classroom


    // Update classroom 

    @router.put(
        "/classroom/{classroom_id}",
        summary="Update Classroom by Classroom ID",
        description="Update meta data for a classroom by provided classroom_id.",
        response_description="Returns updated Classroom's meta data",
        dependencies=[Depends(allow_edit_roles), Depends(verify_classroom_access)],
    )
    async def update_classroom(classroom_id: str, body: UpdateClassroomRequest):
        classroom = await ClassroomService.update_classroom_by_classroom_id(classroom_id, body)
        if classroom is None:
            raise HTTPException(
                status_code=404,
                detail=f"Classroom ({classroom}) does not exist",
            )
        return classroom


    // Delete classroom

    class DeactivateClassroomRequest(JsonModel):
        classroom_id: str

    @router.put(
        "/classroom/deactivation",
        summary="Deactivate a classroom",
        description="Changes active status to inactive for provided Classroom ID",
        
        response_description="Classroom id that has been deleted",
        dependencies=[Depends(allow_edit_roles)],
    )
    async def deactivate_classroom(request: Request, body: DeactivateClassroomRequest):
    try:
        deleted_classrooms = await ClassroomService.deactivate_classroom(body.classroom_ids)
        return deleted_classrooms

       

// 3. Create, update and deactivate Instructors

    // Create Instructor

    class InstructorRequest(JsonModel):
        first_name: str
        last_name: str
        email: Optional[EmailStr]
        username: Optional[str]
        password: Optional[str]
        organization_code: str

    @router.post(
        "/instructor",
        response_model=NewInstructorResponse,
        summary="Create a new Instructor",
        description="Create a new instructor under provided organization",
        response_description="New Instructor’s meta data",
        dependencies=[Depends(allow_edit_roles), Depends(verify_org_access)],
    )
    async def create_instructor(
        request: Request,
        response: Response,
        body: InstructorRequest,
    ):
        try:
            instructor = await UserService.create_instructor(body, organization_code)
            return instructor

    // Edit Instructor

    @router.put(
        "/instructor/{instructor_id}",
        response_model=InstructorResponse,
        summary="Edit a new instructor",
        description="Edit a new instructor under provided organization",
        response_description="Edited instructor’s meta data",
        dependencies=[Depends(allow_edit_roles), Depends(verify_org_access)],
    )
    async def edit_instructor(
        request: Request,
        response: Response,
        body: InstructorRequest,
        instructor_id: str,
    ):
        try:
            user = await UserService.edit_instructor(body, instructor_id)
            return user

    // Deactivate Instructor

    class DeactivateInstructorRequest(JsonModel):
        instructor_id: str

    @router.put(
        "intructor/deactivation",
        summary="Deactivate an instructor",
        description="Changes active status to inactive for provided User ID",
        response_description="empty 204 response",
        status_code=204,
        dependencies=[Depends(allow_edit_roles)],
    )
    async def instructor_deactivation(body: DeactivateInstructorRequest, request: Request):
    try:
        instructor = await UserService.instructor_deactivation(body.instructor_id)
        return instructor

   
// 4. Add or remove Instructors from Classrooms
    
    // Add Instructor to classroom

    @router.post(
        "/classroom/{classroom_id}/instructor/{instructor_id}",
        summary="Add instructor to classroom",
        description="Adds provided instructor to provided classroom",
        response_description="Returns new instructor classroom row",
        dependencies=[Depends(allow_edit_roles), Depends(verify_classroom_access)],
        status_code=204,
    )
    async def add_instructor_to_classroom(request: Request, instructor_id: str, classroom_id: str):
    resp = await ClassroomService.add_instructor_to_classroom(instructor_id, classroom_id)


    if resp is None:
        raise HTTPException(
            status_code=500,
            detail=f"An error occurred while adding an instructor to a classroom with classroom_id = {classroom_id}, instructorId = {instructor_id}",
        )

        return resp

    // Remove Instructor from Classroom

    @router.delete(
        "/classroom/{classroom_id}/instructor/{instructor_id}",
        summary="Remove an instructor from a classroom",
        description="Removes provided instructor from provided classroom",
        response_description="Returns 200 and removed user’s id",
        dependencies=[Depends(allow_edit_roles), Depends(verify_classroom_access)],
        status_code=204,
    )
    async def remove_instructor_from_classroom(request: Request, classroom_id: str, instructor_id: str):
    try:
        resp = await ClassroomService.remove_instructor_from_classroom(classroom_id, instructor_id)
        return


// 5. Add or remove Students from Classrooms

    // Add Student to classroom

    @router.post(
        "/classroom/{classroom_id}/trainee/{student_id}",
        summary="Add a trainee to a classroom",
        description="Adds provided trainee to provided classroom",
        response_description="Returns new School row",
        dependencies=[Depends(allow_edit_roles), Depends(verify_classroom_access)],
        status_code=204,
    )
    async def add_trainee_to_classroom(request: Request, classroom_id: str, student_id: str):
        resp = await ClassroomService.add_trainee_to_classroom(instructor_id, classroom_id, student_id)
        if resp is None:
            raise HTTPException(
                status_code=500,
                detail=f"Internal error adding trainee {student_id} to classroom {classroom_id}",
            )


        return resp
            
   
    // Remove student from classroom

    @router.delete(
        "/classroom/{classroom_id}/trainee/{student_id}",
        summary="Remove a trainee from a classroom",
        description="Removes provided trainee from provided classroom",
        response_description="Returns 200 and removed users id",
        dependencies=[Depends(allow_edit_roles), Depends(verify_classroom_access)],
        status_code=204,
    )
    async def remove_trainee_from_classroom(request: Request, classroom_id: str, student_id: str):
    try:
        resp = await ClassroomService.remove_trainee_from_classroom(classroom_id, student_id)
        return resp


// 6. Add update, deactivate child Organizations
	
	// Add child organization

    class CreateOrganizationRequest(JsonModel):
        name: str
        seats: int
        instructor_seats: int
        expiration: Optional[date]

    @router.post(
        "/organization/child/{organization_id}",
        summary="Add a child organization to an organization",
        description="Add a child organization to an organization",
        response_description="The updated organization",
        response_model=Organization,
    )
    async def add_child_to_organization(organization_id: int, body: CreateOrganizationRequest):
        organization = await OrganizationService.add_child_organization(organization_id, body.dict())
        return organization


	// Update child organization

    class UpdateOrganizationRequest(JsonModel):
        id: str
        name: str
        seats: int
        instructor_seats: int
        expiration: Optional[date]

    @router.put(
        "/organization/child/{organization_id}",
        summary="Update a child organization to an organization",
        description="Update a child organization to an organization",
        response_description="The updated organization",
        response_model=Organization,
    )
    async def update_child_to_organization(organization_id: int, body: UpdateOrganizationRequest):
        organization = await OrganizationService.update_child_organization(organization_id, body.dict())
        return organization


    // Deactivate child organization

    @router.delete(
        "/organization/{organization_id}/child/{child_organization_id}",
        summary="Remove a child organization from an organization",
        description="Remove a child organization from an organization",
        response_description="The updated organization",
    )
    async def remove_organization_child(
        organization_id: int,
        child_organization_id: int,
    ):

    organization = await remove_child_organization(organization_id, child_organization_id)
    return organization

